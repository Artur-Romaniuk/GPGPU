#version 450

layout(local_size_x_id = 0, local_size_y = 1, local_size_z = 1) in;
layout(constant_id=1) const int nParticles=0;
layout(constant_id=2) const int nTriangles=150;

layout(push_constant) uniform PushStruct {
  mat4 mvp;
	vec4 pos;
	float dT; // timestep
} p;

layout(binding = 0) buffer Alive {uint gAlive[];};
layout(binding = 1) buffer PosLife {vec4 gPosLife[];};
layout(binding = 2) buffer VelMass {vec4 gVelMass[];};
layout(binding = 3) readonly buffer TriangleSoup {vec4 gTriangleSoup[];};
layout(binding = 4) uniform sampler3D gForceFieldSampler;


shared vec4[gl_WorkGroupSize.x] triangleCache;

const float EPSILON = 0.001f;
const float MAX_FLOAT = 3.402823466e+38;

vec4 cross3(vec4 a, vec4 b){
	vec4 c;
	c.x = a.y * b.z - b.y * a.z;
	c.y = a.z * b.x - b.z * a.x;
	c.z = a.x * b.y - b.x * a.y;
	c.w = 0.f;
	return c;
}

float dot3(vec4 a, vec4 b){
	return a.x*b.x + a.y*b.y + a.z*b.z;
}

// This function expects two points defining a ray (x0 and x1)
// and three vertices stored in v1, v2, and v3 (the last component is not used)
// it returns true if an intersection is found and sets the isectT and isectN
// with the intersection ray parameter and the normal at the intersection point.
bool LineTriangleIntersection(	vec4 x0, vec4 x1,
								vec4 v1, vec4 v2, vec4 v3,
								inout float isectT, inout vec4 isectN){

	vec4 dir = x1 - x0;
	dir.w = 0.f;

	vec4 e1 = v2 - v1;
	vec4 e2 = v3 - v1;
	e1.w = 0.f;
	e2.w = 0.f;

	vec4 s1 = cross3(dir, e2);
	float divisor = dot3(s1, e1);
	if (divisor == 0.f)
		return false;
	float invDivisor = 1.f / divisor;

	// Compute first barycentric coordinate
	vec4 d = x0 - v1;
	float b1 = dot3(d, s1) * invDivisor;
	if (b1 < -EPSILON || b1 > 1.f + EPSILON)
		return false;

	// Compute second barycentric coordinate
	vec4 s2 = cross3(d, e1);
	float b2 = dot3(dir, s2) * invDivisor;
	if (b2 < -EPSILON || b1 + b2 > 1.f + EPSILON)
		return false;

	// Compute _t_ to intersection point
	float t = dot3(e2, s2) * invDivisor;
	if (t < -EPSILON || t > 1.f + EPSILON)
		return false;

	// Store the closest found intersection so far
	isectT = t;
	isectN = cross3(e1, e2);
	isectN = normalize(isectN);
	return true;

}

bool CheckCollisions(	vec4 x0, vec4 x1,
						uint nTriangles,
						inout float t,
						inout vec4 n){
							

	// ADD YOUR CODE HERE

	// Each vertex of a triangle is stored as a float4, the last component is not used.
	// gTriangleSoup contains vertices of triangles in the following layout:
	// --------------------------------------------------------------
	// | t0_v0 | t0_v1 | t0_v2 | t1_v0 | t1_v1 | t1_v2 | t2_v0 | ...
	// --------------------------------------------------------------

	// First check collisions loading the triangles from the global memory.
	// Iterate over all triangles, load the vertices and call the LineTriangleIntersection test 
	// for each triangle to find the closest intersection. 

	// Notice that each thread has to read vertices of all triangles.
	// As an optimization you should implement caching of the triangles in the local memory.
	// The cache should hold as many float4 vertices as the number of threads.
	// In other words, each thread loads (at most) *one vertex*.
	// Consequently, the number of triangles in the cache will be nThreads/4.
	// Notice that if there are many triangles (e.g. CubeMonkey.obj), not all
	// triangles can fit into the cache at once. 
	// Therefore, you have to load the triangles in chunks, until you process them all.

	// The caching implementation should roughly follow this scheme:
	uint nProcessed = 0;  
	const uint nThreads = gl_WorkGroupSize.x - gl_WorkGroupSize.x%3;
	bool intersected = false;

	while (nProcessed < nTriangles) {
		//Load a 'k' triangles in to the cache
		uint k = nThreads/3;
		if(nProcessed + k > nTriangles){
			k = nTriangles - nProcessed;
		}

		if(gl_LocalInvocationIndex < k*3){
			triangleCache[gl_LocalInvocationIndex] = gTriangleSoup[nProcessed * 3 + gl_LocalInvocationIndex];
		}
		barrier();

		// Iterate over the triangles in the cache and test for the intersection
		t = MAX_FLOAT;
		float newT = MAX_FLOAT;
		vec4 newN;

		for(uint index = 0; index<k*3; index+=3){
			if(LineTriangleIntersection(x0, x1, triangleCache[index], triangleCache[index+1], triangleCache[index+2], newT, newN)){
				intersected = true;
				if(newT < t){
					t = newT;
					n = newN;
				}
			}
		}

		nProcessed += k; 
		barrier();
	}

	return intersected;
}


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// This is the integration kernel. Implement the missing functionality
//
// Input data:
// gAlive         - Field of flag indicating whether the particle with that index is alive (!= 0) or dead (0). You will have to modify this
// gForceField    - 3D texture with the  force field
// sampler        - 3D texture sampler for the force field (see usage below)
// nParticles     - Number of input particles
// nTriangles     - Number of triangles in the scene (for collision detection)
// lTriangleCache - Local memory cache to be used during collision detection for the triangles
// gTriangleSoup  - The triangles in the scene (layout see the description of CheckCollisions())
// gPosLife       - Position (xyz) and remaining lifetime (w) of a particle
// gVelMass       - Velocity vector (xyz) and the mass (w) of a particle
// dT             - The timestep for the integration (the has to be subtracted from the remaining lifetime of each particle)
//
// Output data:
// gAlive   - Updated alive flags
// gPosLife - Updated position and lifetime
// gVelMass - Updated position and mass
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void main() {
	const uint Gid = gl_GlobalInvocationID.x;
	const uint Lid = gl_LocalInvocationID.x;

	vec4 x0 = vec4(0,0,0,0);
	vec4 v0 = vec4(0,0,0,0);
	if(Gid<=nParticles){
		x0 = gPosLife[Gid];
		v0 = gVelMass[Gid];
	}

	const vec4 gAccel = vec4(0.f, 0.f, -9.81f, 0.f);
	vec4 F0 = texture(gForceFieldSampler, x0.xyz);

	vec4 x1;
	x1.xyz = x0.xyz + v0.xyz * p.dT + (0.5f * gAccel.xyz * p.dT * p.dT);
	x1.w = x0.w - p.dT;
	vec4 newAccel = gAccel + 0.5f * (F0 / v0.w); 
	vec4 v1;
	v1.xyz = v0.xyz + 0.5F * (gAccel.xyz + newAccel.xyz) * p.dT;
	v1.w = v0.w;

	float isectT;
	vec4 isectN;
	if(CheckCollisions(x0, x1, nTriangles, isectT, isectN)){
		v1.xyz = 0.8f * (v1.xyz - 2*dot3(v1, isectN)*isectN.xyz);
		x1.xyz = x0.xyz + (x1.xyz - x0.xyz) * isectT + isectN.xyz * EPSILON;
	}

	barrier();
	if(x1.w < 0 && Gid<=nParticles){
		gAlive[Gid] = 0;
	}else if(Gid<= nParticles){
		gPosLife[Gid] = x1;
		gVelMass[Gid] = v1;

		uint anotherParticle = (Gid + 10) % nParticles;
		if(length(v0.xyz)<1.f && gAlive[anotherParticle] == 0 && Gid<=nParticles){
			gAlive[anotherParticle] = 1;
			gAlive[Gid] = 1;
			gPosLife[anotherParticle].xyz = x0.xyz;
			gPosLife[anotherParticle].w = 20;
			gVelMass[anotherParticle].xyz = 2*v0.xyz;
			gVelMass[anotherParticle].w = v0.w/2;
			gPosLife[Gid].w += 20;
		}

	}

	
	// Check for collisions and correct the position and velocity of the particle if it collides with a triangle
	// - Don't forget to offset the particles from the surface a little bit, otherwise they might get stuck in it.
	// - Dampen the velocity (e.g. by a factor of 0.8) to simulate dissipation of the energy.
	
	// Kill the particle if its life is < 0.0 by setting the corresponding flag in gAlive to 0.

	// Independently of the status of the particle, possibly create a new one.
	// For instance, if the particle gets too fast (or too high, or passes through some region), it is split into two...
	
	// you can check if particle at i is dead and if particle at i+nParticle is alive, then swap them

}
