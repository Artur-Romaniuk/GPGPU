#version 450

layout(local_size_x_id = 0, local_size_y_id = 1, local_size_z = 1) in;
layout(constant_id = 2) const int kernelRadius=5;
layout(constant_id = 3) const int V_ELEMENTS = 3; // this gets overwritten

layout(push_constant) uniform PushStruct {
    uint width;
    uint height;
    uint pitch;
    float kernelWeight;
    float[32] kernel;
} p;

// these bindings are reversed for the vertical
// it changes nothing for you though.
layout(binding = 0) buffer outBuf {float o_v[];};
layout(binding = 1) buffer inBuf {float v[];};

// here we simplify and hardcode it

shared float[gl_WorkGroupSize.y*(2+V_ELEMENTS)][gl_WorkGroupSize.x] tile;

void main(){
    uvec2 Wgid = gl_WorkGroupID.xy;
    uvec2 Lid = gl_LocalInvocationID.xy;
    uvec2 Wgs = gl_WorkGroupSize.xy;
    uvec2 Gid = gl_GlobalInvocationID.xy;

    const uint workGroupOffset = Wgs.y * V_ELEMENTS * Wgid.y;
    const uint adjustedGid = workGroupOffset + Lid.y;

	// Conceptually similar to ConvHorizontal

    for (uint index = 0U; index < (V_ELEMENTS + 2); index++){
        const uint tileY = index * Wgs.y + Lid.y;
        tile[tileY][Lid.x] = 0;
    }

    barrier();

    for (uint index = 0; index < V_ELEMENTS+2; index++){
        const uint tileY = index * Wgs.y + Lid.y;
        const uint imageY = adjustedGid + Wgs.y*(index-1);

        if (imageY < p.height && Gid.x < p.width){
            tile[tileY][Lid.x] = v[p.pitch * imageY + Gid.x];
        }
    }

    // Sync the work-items after loading
    barrier();

    //Compute and store results
    for(uint index = 1; index<V_ELEMENTS+1; index++){
        float value = 0;

        for (int k = -kernelRadius; k <= kernelRadius; k++){
            const uint tileY = index * Wgs.y + Lid.y + k;

            if (tileY >= 0 && tileY < p.height){
                value += tile[tileY][Lid.x] * p.kernel[kernelRadius - k];
            }
        }
        const uint imageY = adjustedGid + Wgs.y*(index-1);

        if (imageY < p.height && Gid.x < p.width){
            o_v[p.pitch*imageY + Gid.x] = value*p.kernelWeight;
        }
    }
}