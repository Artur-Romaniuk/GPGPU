#version 450

layout(local_size_x_id = 0, local_size_y_id = 1, local_size_z = 1) in;
layout(constant_id = 2) const int kernelRadius=5;
layout(constant_id = 3) const int H_ELEMENTS = 3; // this gets overwritten

layout(push_constant) uniform PushStruct {
    uint width;
    uint height;
    uint pitch;
    float kernelWeight;
    float[32] kernel;
} p;

// these variables are reversed for the vertical pass
// because the output of current pass is input of next pass
layout(binding = 0) buffer inBuf {float v[];};
layout(binding = 1) buffer outBuf {float o_v[];};

// here we simplify and hardcode it
shared float[gl_WorkGroupSize.y][gl_WorkGroupSize.x*(H_ELEMENTS+2)] tile;

void main(){
    uvec2 Wgid = gl_WorkGroupID.xy;
    uvec2 Lid = gl_LocalInvocationID.xy;
    uvec2 Wgs = gl_WorkGroupSize.xy;
    uvec2 Gid = gl_GlobalInvocationID.xy;

    const uint workGroupOffset = Wgs.x * H_ELEMENTS * Wgid.x;
    const uint adjustedGid = workGroupOffset + Lid.x;

    for(uint index = 0; index<H_ELEMENTS+2; index++){
        const uint tileX = index * Wgs.x + Lid.x;
        tile[Lid.y][tileX] = 0;
    }
    
    barrier();

	//the left halo border of the tile

	//Load main data + right halo
    for (int index = 0; index < H_ELEMENTS+2; index++){
        const uint tileX = index * Wgs.x + Lid.x;
        const uint imageX = adjustedGid + Wgs.x*(index-1);

        if (imageX < p.width && Gid.y < p.height){
            tile[Lid.y][tileX] = v[p.pitch * Gid.y + imageX];
        }
    }

	//Sync the work-items after loading
    barrier();
	
	//Compute and store results
    for(uint index = 1; index<H_ELEMENTS+1; index++){
        float value = 0;

        for (int k = -kernelRadius; k <= kernelRadius; k++){
            const uint tileX = index * Wgs.x + Lid.x + k;

            if (tileX >= 0 && tileX < p.width){
                value += tile[Lid.y][tileX] * p.kernel[kernelRadius - k];
            }
        }

        const uint imageX = adjustedGid + Wgs.x*(index-1);

        if (imageX < p.width && Gid.y < p.height){
            o_v[p.pitch*Gid.y + imageX] = value*p.kernelWeight;
        }
    }

}