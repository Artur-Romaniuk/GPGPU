#version 450

layout(local_size_x_id = 0, local_size_y_id = 1, local_size_z = 1) in;

layout(push_constant) uniform PushStruct {
    uint width;
    uint height;
    uint pitch;
    float kernelWeight;
    float[9] kernel; // size of kernel is fixed!
} p;

layout(binding = 0) buffer inBuf {float v[];};
layout(binding = 1) buffer outBuf {float o_v[];};
// local memory will hold the center pixels + halo
//         TODO: fill size of local memory using gl_WorkGroupSize.x, .y, and kernel size
//          V V
shared float[gl_WorkGroupSize.y + 2][gl_WorkGroupSize.x + 2] tile;

void main() {
  uvec2 Gid = gl_GlobalInvocationID.xy;
  uvec2 Lid = gl_LocalInvocationID.xy;
  uint TILE_X = gl_WorkGroupSize.x;
  uint TILE_Y = gl_WorkGroupSize.y;

  const uint pixelIndex = p.pitch * Gid.y + Gid.x;
	// TODO:
  // fill local memory with zeros
  if (Lid.x == 0){
    tile[Lid.y + 1][0] = 0;
    if(Lid.y == 0){
      tile[0][0] = 0;
    }
  }else if (Lid.x == (TILE_X - 1)){
    tile[Lid.y + 1][TILE_X + 1] = 0;
    if(Lid.y == 0){
      tile[0][TILE_X + 1] = 0;
    }
  }

  if (Lid.y == 0){
    tile[0][Lid.x + 1] = 0;
    if(Lid.x == 0){
      tile[TILE_Y + 1][0] = 0;
    }
  }else if (Lid.y == (TILE_Y - 1)){
    tile[TILE_Y + 1][Lid.x + 1] = 0;
    if(Lid.x == 0){
      tile[TILE_Y + 1][TILE_X + 1] = 0;
    }
  }

  barrier();

  // load the tile from global to local memory
  if(Gid.x < p.width && Gid.y < p.height){
    tile[Lid.y+1][Lid.x+1] = v[pixelIndex];
  }

  // load the halo pixels:
    // load left halo (only rightmost threads are working)
    // load right halo (only leftmost threads are working)
    // load top halo (coalesced read)
    // load bottom halo (coalesced read)
  if(Lid.x == 0 && Gid.x != 0){
      tile[Lid.y+1][0] = v[pixelIndex - 1];
  }else if(Lid.x == (TILE_X-1) && Gid.x < p.width-1){
      tile[Lid.y+1][TILE_X+1] = v[pixelIndex + 1];
  }

  if(Lid.y == 0 && Gid.y != 0){
      tile[0][Lid.x+1] = v[p.pitch * (Gid.y-1) + Gid.x];
  }else if(Lid.y == (TILE_Y-1) && Gid.y < p.height-1){
      tile[TILE_Y+1][Lid.x+1] = v[p.pitch * (Gid.y+1) + Gid.x];
  }
  
  if(Lid.x == 0 && Lid.y == 0 && Gid.x != 0 && Gid.y != 0){
    tile[0][0] = v[p.pitch * (Gid.y-1) + Gid.x - 1];
  }else if(Lid.x == (TILE_X-1) && Lid.y == 0 && Gid.x < p.width-1 && Gid.y != 0){
    tile[0][TILE_X+1] = v[p.pitch * (Gid.y-1) + Gid.x + 1];
  }else if(Lid.x == 0 && Lid.y == (TILE_Y-1) && Gid.x != 0 && Gid.y < p.height-1){
      tile[TILE_Y+1][0] = v[p.pitch * (Gid.y+1) + Gid.x - 1];
  }else if(Lid.x == (TILE_X-1) && Lid.y == (TILE_Y-1) && Gid.x < p.width-1 && Gid.y < p.height-1){
      tile[TILE_Y+1][TILE_X+1] = v[p.pitch * (Gid.y+1) + Gid.x + 1];
  }

  barrier();
  // using a loop, multiply the kernel weights to their relevant pixel value
  // (or perform manually for even more performance)
  float result = tile[Lid.y][Lid.x] * p.kernel[0];
  result+= tile[Lid.y][Lid.x+1] * p.kernel[1];
  result+= tile[Lid.y][Lid.x+2] * p.kernel[2];
  result+= tile[Lid.y+1][Lid.x] * p.kernel[3];
  result+= tile[Lid.y+1][Lid.x+1] * p.kernel[4];
  result+= tile[Lid.y+1][Lid.x+2] * p.kernel[5];
  result+= tile[Lid.y+2][Lid.x] * p.kernel[6];
  result+= tile[Lid.y+2][Lid.x+1] * p.kernel[7];
  result+= tile[Lid.y+2][Lid.x+2] * p.kernel[8];
  result*= p.kernelWeight;

  // write to global memory
  if(Gid.x < p.width && Gid.y < p.height)
    o_v[pixelIndex] = result;
  
}